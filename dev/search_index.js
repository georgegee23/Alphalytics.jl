var documenterSearchIndex = {"docs":
[{"location":"#Alphalytics","page":"Home","title":"Alphalytics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Alphalytics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Alphalytics.consecutive_values-Tuple{AbstractMatrix, Any, Int64}","page":"Home","title":"Alphalytics.consecutive_values","text":"consecutive_values(mtx::AbstractMatrix, target::Any, n::Int) -> Vector{Bool}\n\nCheck each column of the matrix mtx for at least n consecutive occurrences of target.\n\nArguments\n\nmtx::AbstractMatrix: The input matrix to search (columns are checked independently).\ntarget::Any: The value to look for consecutive occurrences of.\nn::Int: The number of consecutive occurrences required.\n\nReturns\n\nVector{Bool}: A boolean vector where each element indicates if the corresponding column contains at least n consecutive target values.\n\nExample\n\nmtx = [0 1; 1 1; 1 0; 1 1]\nconsecutive_values(mtx, 1, 3) # returns [true, true]\n\n\n\n\n\n","category":"method"},{"location":"#Alphalytics.consecutive_values-Tuple{AbstractVector, Any, Int64}","page":"Home","title":"Alphalytics.consecutive_values","text":"consecutive_values(ta::AbstractVector, target::Any, n::Int) -> Bool\n\nCheck if there are at least n consecutive occurrences of target in the vector ta.\n\nArguments\n\nta::AbstractVector: The input vector to search.\ntarget::Any: The value to look for consecutive occurrences of.\nn::Int: The number of consecutive occurrences required.\n\nReturns\n\nBool: Returns true if target appears at least n times in a row in ta, otherwise false.\n\nExample\n\nta = [0, 1, 1, 1, 0, 1, 1]\nconsecutive_values(ta, 1, 3) # returns true\nconsecutive_values(ta, 0, 2) # returns false\n\n\n\n\n\n","category":"method"},{"location":"#Alphalytics.consecutive_values-Tuple{TimeSeries.TimeArray, Any, Int64}","page":"Home","title":"Alphalytics.consecutive_values","text":"consecutive_values(ta::TimeArray, target::Any, n::Int) -> Vector{Bool}\n\nCheck each column of the TimeArray for at least n consecutive occurrences of target.\n\nArguments\n\nta::TimeArray: The input TimeArray to search (columns are checked independently).\ntarget::Any: The value to look for consecutive occurrences of.\nn::Int: The number of consecutive occurrences required.\n\nReturns\n\nVector{Bool}: A boolean vector where each element indicates if the corresponding column contains at least n consecutive target values.\n\nExample\n\nconsecutive_values(returns_ts, 0, 10)\n\n\n\n\n\n","category":"method"}]
}
